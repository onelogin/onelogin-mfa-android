@file:Suppress("unused")

package com.onelogin.mfa.model

import com.onelogin.mfa.data.otp.TotpToken

/**
 * Represents a factor item.
 *
 * @property id ID auto-generated by Room database
 * @property credentialId ID used only by OneLogin factors
 * @property subdomain The domain of the OneLogin factor or third party factor
 * @property shard OneLogin shard
 * @property username Username associated with factor
 * @property seed Seed used to generate TOTP
 * @property issuer Issuer of the factor
 * @property creationDate Date factor was added to Room database
 * @property allowRoot Device setting from OneLogin to allow rooted devices, defaults true
 * @property forceLock Device setting from OneLogin to require keyguard, defaults false
 * @property paired Device setting from OneLogin to determine if factor is still paired to account
 * @property displayName Display name of factor used for views
 * @property orderPreference Order preference for sorting factors
 * @property crypto Cryptography method, defaults to HmacSHA1
 * @property period TOTP validity period
 * @property digits TOTP digits
 * Not yet supported
 * @property allowBackup Device setting from OneLogin to allow for backup, defaults to true
 * Not yet supported
 * @property requireBiometrics Device setting to require biometric verification to view OTP
 */
data class Factor(
    var id: Long,
    var credentialId: String?,
    var subdomain: String?,
    var shard: String?,
    var username: String?,
    var seed: String,
    var issuer: String?,
    var creationDate: Long,
    var allowRoot: Boolean,
    var forceLock: Boolean,
    var paired: Boolean,
    var displayName: String?,
    var orderPreference: Int,
    var crypto: String,
    var period: Int,
    var digits: Int,
    var allowBackup: Boolean,
    var requireBiometrics: Boolean
) {
    constructor() : this(
        0,
        "",
        "",
        "",
        "",
        "",
        "",
        0,
        true,
        false,
        true,
        "",
        0,
        "HmacSHA1",
        30,
        6,
        true,
        false
    )

    /**
     * Retrieve the current OTP for a Factor.
     *
     * @return Returns the OTP based on the seed, peeriod, digits, crypto, and time
     */
    fun getOtp(): String {
        val totpToken = TotpToken(this.seed, this.period, this.digits, this.crypto)
        return totpToken.generateOtp()
    }

    /**
     * Retrieve OTP timer for a Factor in seconds for the validity of the current OTP.
     *
     * @return Returns the time remaining in seconds
     */
    fun getTimer(): Int {
        val totpToken = TotpToken(this.seed, this.period, this.digits, this.crypto)
        return totpToken.getTimer()
    }

    /**
     * Retrieve OTP timer for a Factor in milliseconds for the validity of the current OTP.
     *
     * @return Returns the time remaining in milliseconds
     */
    fun getTimerInMillis(): Long {
        val totpToken = TotpToken(this.seed, this.period, this.digits, this.crypto)
        return totpToken.getTimerInMillis()
    }

    /**
     * Retrieve OTP period time for a Factor in milliseconds.
     *
     * @return Returns the OTP period time in milliseconds
     */
    fun getPeriodInMillis(): Long {
        val totpToken = TotpToken(this.seed, this.period, this.digits, this.crypto)
        return totpToken.periodInMillis
    }

    /**
     * Generate the display name for a Factor.
     *
     * @return Returns a display name. If displayName, subdomain, and issuer are blank; return
     * an empty string.
     */
    fun generateDisplayName(): String {
        return when {
            this.displayName?.isNotBlank() == true -> this.displayName ?: ""
            this.subdomain?.isNotBlank() == true -> this.subdomain ?: ""
            else -> this.issuer ?: ""
        }
    }
}